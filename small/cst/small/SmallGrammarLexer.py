# Generated from small/SmallGrammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,214,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
        1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
        1,25,1,26,1,26,1,27,4,27,157,8,27,11,27,12,27,158,1,28,1,28,1,29,
        1,29,1,29,5,29,166,8,29,10,29,12,29,169,9,29,1,30,1,30,1,30,1,30,
        5,30,175,8,30,10,30,12,30,178,9,30,1,30,1,30,1,30,1,30,1,30,1,30,
        5,30,186,8,30,10,30,12,30,189,9,30,1,30,3,30,192,8,30,1,30,3,30,
        195,8,30,3,30,197,8,30,1,30,1,30,1,31,3,31,202,8,31,1,31,1,31,1,
        31,1,31,1,32,4,32,209,8,32,11,32,12,32,210,1,32,1,32,2,176,187,0,
        33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,0,55,27,57,0,59,28,61,29,63,30,65,31,1,0,4,1,0,
        48,57,2,0,65,90,97,122,1,1,10,10,2,0,9,9,32,32,220,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,55,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,
        1,0,0,0,3,70,1,0,0,0,5,75,1,0,0,0,7,81,1,0,0,0,9,90,1,0,0,0,11,97,
        1,0,0,0,13,99,1,0,0,0,15,101,1,0,0,0,17,103,1,0,0,0,19,105,1,0,0,
        0,21,107,1,0,0,0,23,109,1,0,0,0,25,111,1,0,0,0,27,115,1,0,0,0,29,
        118,1,0,0,0,31,120,1,0,0,0,33,122,1,0,0,0,35,124,1,0,0,0,37,126,
        1,0,0,0,39,128,1,0,0,0,41,131,1,0,0,0,43,133,1,0,0,0,45,136,1,0,
        0,0,47,139,1,0,0,0,49,142,1,0,0,0,51,147,1,0,0,0,53,153,1,0,0,0,
        55,156,1,0,0,0,57,160,1,0,0,0,59,162,1,0,0,0,61,196,1,0,0,0,63,201,
        1,0,0,0,65,208,1,0,0,0,67,68,5,105,0,0,68,69,5,102,0,0,69,2,1,0,
        0,0,70,71,5,101,0,0,71,72,5,108,0,0,72,73,5,115,0,0,73,74,5,101,
        0,0,74,4,1,0,0,0,75,76,5,119,0,0,76,77,5,104,0,0,77,78,5,105,0,0,
        78,79,5,108,0,0,79,80,5,101,0,0,80,6,1,0,0,0,81,82,5,102,0,0,82,
        83,5,117,0,0,83,84,5,110,0,0,84,85,5,99,0,0,85,86,5,116,0,0,86,87,
        5,105,0,0,87,88,5,111,0,0,88,89,5,110,0,0,89,8,1,0,0,0,90,91,5,114,
        0,0,91,92,5,101,0,0,92,93,5,116,0,0,93,94,5,117,0,0,94,95,5,114,
        0,0,95,96,5,110,0,0,96,10,1,0,0,0,97,98,5,123,0,0,98,12,1,0,0,0,
        99,100,5,125,0,0,100,14,1,0,0,0,101,102,5,40,0,0,102,16,1,0,0,0,
        103,104,5,41,0,0,104,18,1,0,0,0,105,106,5,44,0,0,106,20,1,0,0,0,
        107,108,5,59,0,0,108,22,1,0,0,0,109,110,5,61,0,0,110,24,1,0,0,0,
        111,112,5,97,0,0,112,113,5,110,0,0,113,114,5,100,0,0,114,26,1,0,
        0,0,115,116,5,111,0,0,116,117,5,114,0,0,117,28,1,0,0,0,118,119,5,
        43,0,0,119,30,1,0,0,0,120,121,5,45,0,0,121,32,1,0,0,0,122,123,5,
        42,0,0,123,34,1,0,0,0,124,125,5,47,0,0,125,36,1,0,0,0,126,127,5,
        62,0,0,127,38,1,0,0,0,128,129,5,62,0,0,129,130,5,61,0,0,130,40,1,
        0,0,0,131,132,5,60,0,0,132,42,1,0,0,0,133,134,5,60,0,0,134,135,5,
        61,0,0,135,44,1,0,0,0,136,137,5,61,0,0,137,138,5,61,0,0,138,46,1,
        0,0,0,139,140,5,33,0,0,140,141,5,61,0,0,141,48,1,0,0,0,142,143,5,
        84,0,0,143,144,5,114,0,0,144,145,5,117,0,0,145,146,5,101,0,0,146,
        50,1,0,0,0,147,148,5,70,0,0,148,149,5,97,0,0,149,150,5,108,0,0,150,
        151,5,115,0,0,151,152,5,101,0,0,152,52,1,0,0,0,153,154,7,0,0,0,154,
        54,1,0,0,0,155,157,3,53,26,0,156,155,1,0,0,0,157,158,1,0,0,0,158,
        156,1,0,0,0,158,159,1,0,0,0,159,56,1,0,0,0,160,161,7,1,0,0,161,58,
        1,0,0,0,162,167,3,57,28,0,163,166,3,57,28,0,164,166,3,53,26,0,165,
        163,1,0,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,
        168,1,0,0,0,168,60,1,0,0,0,169,167,1,0,0,0,170,171,5,47,0,0,171,
        172,5,42,0,0,172,176,1,0,0,0,173,175,9,0,0,0,174,173,1,0,0,0,175,
        178,1,0,0,0,176,177,1,0,0,0,176,174,1,0,0,0,177,179,1,0,0,0,178,
        176,1,0,0,0,179,180,5,42,0,0,180,197,5,47,0,0,181,182,5,47,0,0,182,
        183,5,47,0,0,183,187,1,0,0,0,184,186,9,0,0,0,185,184,1,0,0,0,186,
        189,1,0,0,0,187,188,1,0,0,0,187,185,1,0,0,0,188,191,1,0,0,0,189,
        187,1,0,0,0,190,192,5,13,0,0,191,190,1,0,0,0,191,192,1,0,0,0,192,
        194,1,0,0,0,193,195,7,2,0,0,194,193,1,0,0,0,195,197,1,0,0,0,196,
        170,1,0,0,0,196,181,1,0,0,0,197,198,1,0,0,0,198,199,6,30,0,0,199,
        62,1,0,0,0,200,202,5,13,0,0,201,200,1,0,0,0,201,202,1,0,0,0,202,
        203,1,0,0,0,203,204,5,10,0,0,204,205,1,0,0,0,205,206,6,31,0,0,206,
        64,1,0,0,0,207,209,7,3,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,208,
        1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,6,32,0,0,213,66,
        1,0,0,0,11,0,158,165,167,176,187,191,194,196,201,210,1,6,0,0
    ]

class SmallGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    WHILE = 3
    FUNCTION = 4
    RETURN = 5
    LBRACE = 6
    RBRACE = 7
    LPAR = 8
    RPAR = 9
    COMMA = 10
    SEMICOLON = 11
    ASSIGN = 12
    AND = 13
    OR = 14
    ADD = 15
    SUBSTRACT = 16
    MULTIPLY = 17
    DIVIDE = 18
    GREATER = 19
    GREATER_EQUAL = 20
    LESS = 21
    LESS_EQUAL = 22
    EQUAL = 23
    DIFFERENT = 24
    TRUE = 25
    FALSE = 26
    NUM = 27
    IDENTIFIER = 28
    COMMENT = 29
    NEWLINE = 30
    WS = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'function'", "'return'", "'{'", 
            "'}'", "'('", "')'", "','", "';'", "'='", "'and'", "'or'", "'+'", 
            "'-'", "'*'", "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", 
            "'True'", "'False'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "FUNCTION", "RETURN", "LBRACE", "RBRACE", 
            "LPAR", "RPAR", "COMMA", "SEMICOLON", "ASSIGN", "AND", "OR", 
            "ADD", "SUBSTRACT", "MULTIPLY", "DIVIDE", "GREATER", "GREATER_EQUAL", 
            "LESS", "LESS_EQUAL", "EQUAL", "DIFFERENT", "TRUE", "FALSE", 
            "NUM", "IDENTIFIER", "COMMENT", "NEWLINE", "WS" ]

    ruleNames = [ "IF", "ELSE", "WHILE", "FUNCTION", "RETURN", "LBRACE", 
                  "RBRACE", "LPAR", "RPAR", "COMMA", "SEMICOLON", "ASSIGN", 
                  "AND", "OR", "ADD", "SUBSTRACT", "MULTIPLY", "DIVIDE", 
                  "GREATER", "GREATER_EQUAL", "LESS", "LESS_EQUAL", "EQUAL", 
                  "DIFFERENT", "TRUE", "FALSE", "DIGIT", "NUM", "LETTER", 
                  "IDENTIFIER", "COMMENT", "NEWLINE", "WS" ]

    grammarFileName = "SmallGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


